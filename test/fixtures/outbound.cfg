{
    "outbound.ok": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["flow:main", "main_flow", {"observation": "volume"}, "modules.builders.mqtt_payload_builder"],
            ["usage:water_(?P<which>[a-z0-9]+)", "usage_%(which)s", {"observation": "flow_detection"}, "modules.builders.mqtt_payload_builder"]
        ]
    },
    "outbound.default_builder": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "default_builder": "modules.builders.mqtt_payload_builder",
        "rules": [
            ["flow:main", "main_flow", {"observation": "volume"}],
            ["usage:water_(?P<which>[a-z0-9]+)", "usage_%(which)s", {"observation": "flow_detection"}]
        ]
    },
    "outbound.special_chars": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "default_builder": "modules.builders.mqtt_payload_builder",
        "rules": [
            ["usage:usage.(?P<which>[a-z0-9.]+)",
                "/data/observation/%(which)s",
                {"observation": "flow_detection"}
            ]
        ]
    },
    "outbound.class_mismatch": {
        "adapter_class": "foo.bar.REOutboundAdapter",
        "rules": []
    },
    "outbound.rule_incomplete.1": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["flow:main", "main_flow", {"observation": "volume"}]
        ]
    },
    "outbound.rule_incomplete.2": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["flow:main", "main_flow", {}, " "]
        ]
    },
    "outbound.rule_incomplete.3": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["flow:main", "", {}, "modules.builders.mqtt_payload_builder"]
        ]
    },
    "outbound.rule_incomplete.4": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["flow:main"]
        ]
    },
    "outbound.bad_regex": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["usage:water_(?P<)", "usage", {}, "modules.builders.mqtt_payload_builder"]
        ]
    },
    "outbound.bad_builder.1": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["usage:water_(?P<which>[a-z0-9]+)", "usage", {}, "foo.bar.builder"]
        ]
    },
    "outbound.bad_builder.2": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["usage:water_(?P<which>[a-z0-9]+)", "usage", {}, "modules.builders.i_do_not_exist"]
        ]
    },
    "outbound.bad_builder.3": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["usage:water_(?P<which>[a-z0-9]+)", "usage", {}, "modules.builders.not_callable"]
        ]
    },
    "outbound.bad_builder.4": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["usage:water_(?P<which>[a-z0-9]+)", "usage", {}, "modules.builders.wrong_sig"]
        ]
    },
    "outbound.topic_parms.1": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["usage:water_(?P<which>[a-z0-9]+)", "usage_%(which)s", {}, "modules.builders.mqtt_payload_builder"]
        ]
    },
    "outbound.topic_parms.2": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["usage:water_(?P<which>[a-z0-9]+)", "usage_%(what)s", {}, "modules.builders.mqtt_payload_builder"]
        ]
    },
    "outbound.builder": {
        "adapter_class": "pycstbox.mqtt.re_adapters.REOutboundAdapter",
        "rules": [
            ["meter:main", "/data/observation/main_meter", {"observation": "volume"}, "test_outboundadapter.wisdom_builder"]
        ]
    }
}